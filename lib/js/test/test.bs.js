// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block                   = require("bs-platform/lib/js/block.js");
var Option                  = require("bs-batteries/lib/js/src/option.js");
var ElementRe               = require("bs-webapi/lib/js/src/dom/nodes/ElementRe.js");
var Js_primitive            = require("bs-platform/lib/js/js_primitive.js");
var Svg$BsSvgAttachment     = require("../src/svg.bs.js");
var Mocha$BsSvgAttachment   = require("./mocha.bs.js");
var Parsers$BsSvgAttachment = require("../src/parsers.bs.js");

var svgOpt = document.getElementById("svg");

var svgroot = Option.get(svgOpt === null ? /* None */0 : [svgOpt]);

ElementRe.insertAdjacentHTML(/* AfterBegin */1, "<circle id=\"c\"></circle>", svgroot);

function circle() {
  return Option.get(Js_primitive.null_to_opt(document.getElementById("c")));
}

beforeEach((function () {
        var c = Option.get(Js_primitive.null_to_opt(document.getElementById("c")));
        c.setAttribute("cx", "20");
        c.setAttribute("cy", "20");
        c.setAttribute("r", "10");
        c.setAttribute("style", "fill: rgb(60, 120, 5); fill-opacity: 0.5");
        return /* () */0;
      }));

it("coordinates", (function () {
        Mocha$BsSvgAttachment.floatEq("leftTop", Svg$BsSvgAttachment.getLeftTop(circle(/* () */0))[/* x */0], 10.0);
        Mocha$BsSvgAttachment.floatEq("center", Svg$BsSvgAttachment.getCenter(circle(/* () */0))[/* x */0], 20.0);
        Mocha$BsSvgAttachment.floatEq("rightBottom", Svg$BsSvgAttachment.getRightBottom(circle(/* () */0))[/* x */0], 30.0);
        Svg$BsSvgAttachment.setLeftTop(/* float array */[
              0.0,
              10.0
            ], circle(/* () */0));
        Mocha$BsSvgAttachment.floatEq("leftTop'", Svg$BsSvgAttachment.getLeftTop(circle(/* () */0))[/* x */0], 0.0);
        Mocha$BsSvgAttachment.floatEq("center'", Svg$BsSvgAttachment.getCenter(circle(/* () */0))[/* x */0], 10.0);
        return Mocha$BsSvgAttachment.floatEq("rightBottom'", Svg$BsSvgAttachment.getRightBottom(circle(/* () */0))[/* x */0], 20.0);
      }));

it("color", (function () {
        var match = Svg$BsSvgAttachment.getFillColor(circle(/* () */0));
        if (typeof match === "number") {
          Mocha$BsSvgAttachment.fail("not Rgba");
        } else if (match.tag) {
          Mocha$BsSvgAttachment.fail("not Rgba");
        } else {
          var rgba = match[0];
          Mocha$BsSvgAttachment.intEq("color r", rgba[/* r */0], 60);
          Mocha$BsSvgAttachment.intEq("color g", rgba[/* g */1], 120);
          Mocha$BsSvgAttachment.intEq("color b", rgba[/* b */2], 5);
          Mocha$BsSvgAttachment.floatEq("color a", rgba[/* a */3], 0.5);
        }
        Svg$BsSvgAttachment.setFillColor(/* Rgba */Block.__(0, [/* record */[
                  /* r */10,
                  /* g */20,
                  /* b */30,
                  /* a */0.6
                ]]), circle(/* () */0));
        var match$1 = Svg$BsSvgAttachment.getFillColor(circle(/* () */0));
        if (typeof match$1 === "number") {
          return Mocha$BsSvgAttachment.fail("not Rgba");
        } else if (match$1.tag) {
          return Mocha$BsSvgAttachment.fail("not Rgba");
        } else {
          var rgba$1 = match$1[0];
          Mocha$BsSvgAttachment.intEq("color r", rgba$1[/* r */0], 10);
          Mocha$BsSvgAttachment.intEq("color g", rgba$1[/* g */1], 20);
          Mocha$BsSvgAttachment.intEq("color b", rgba$1[/* b */2], 30);
          return Mocha$BsSvgAttachment.floatEq("color a", rgba$1[/* a */3], 0.6);
        }
      }));

it("parsers", (function () {
        var match = Parsers$BsSvgAttachment.parseRgb("rgb(5, 10, 15)");
        if (typeof match === "number") {
          Mocha$BsSvgAttachment.fail("not Rgb");
        } else if (match.tag) {
          var rgb = match[0];
          Mocha$BsSvgAttachment.intEq("color r", rgb[/* r */0], 5);
          Mocha$BsSvgAttachment.intEq("color g", rgb[/* g */1], 10);
          Mocha$BsSvgAttachment.intEq("color b", rgb[/* b */2], 15);
        } else {
          Mocha$BsSvgAttachment.fail("not Rgb");
        }
        var match$1 = Parsers$BsSvgAttachment.parseRgba("rgba(5, 10, 15, 0.1)");
        if (typeof match$1 === "number") {
          Mocha$BsSvgAttachment.fail("not Rgba");
        } else if (match$1.tag) {
          Mocha$BsSvgAttachment.fail("not Rgba");
        } else {
          var rgba = match$1[0];
          Mocha$BsSvgAttachment.intEq("color r", rgba[/* r */0], 5);
          Mocha$BsSvgAttachment.intEq("color g", rgba[/* g */1], 10);
          Mocha$BsSvgAttachment.intEq("color b", rgba[/* b */2], 15);
          Mocha$BsSvgAttachment.floatEq("color a", rgba[/* a */3], 0.1);
        }
        var match$2 = Parsers$BsSvgAttachment.parsePoints("5 6, 7 8, 9 10");
        if (match$2) {
          var match$3 = match$2[1];
          if (match$3) {
            var match$4 = match$3[1];
            if (match$4) {
              if (match$4[1]) {
                Mocha$BsSvgAttachment.fail("not 3 points");
              } else {
                var three = match$4[0];
                var two = match$3[0];
                var one = match$2[0];
                Mocha$BsSvgAttachment.floatEq("point 0 x", one[/* x */0], 5);
                Mocha$BsSvgAttachment.floatEq("point 0 y", one[/* y */1], 6);
                Mocha$BsSvgAttachment.floatEq("point 1 x", two[/* x */0], 7);
                Mocha$BsSvgAttachment.floatEq("point 1 y", two[/* y */1], 8);
                Mocha$BsSvgAttachment.floatEq("point 2 x", three[/* x */0], 9);
                Mocha$BsSvgAttachment.floatEq("point 2 y", three[/* y */1], 10);
              }
            } else {
              Mocha$BsSvgAttachment.fail("not 3 points");
            }
          } else {
            Mocha$BsSvgAttachment.fail("not 3 points");
          }
        } else {
          Mocha$BsSvgAttachment.fail("not 3 points");
        }
        var match$5 = Parsers$BsSvgAttachment.parseD("M10 10 C 20 20, 40 20, 50 10");
        if (match$5) {
          var match$6 = match$5[1];
          if (match$6) {
            if (match$6[1]) {
              return Mocha$BsSvgAttachment.fail("not path");
            } else {
              var one$1 = match$5[0];
              Mocha$BsSvgAttachment.stringEq("path 0 op", one$1[/* operator */0], "M");
              return Mocha$BsSvgAttachment.stringEq("path 1 op", one$1[/* operator */0], "C");
            }
          } else {
            return Mocha$BsSvgAttachment.fail("not path");
          }
        } else {
          return Mocha$BsSvgAttachment.fail("not path");
        }
      }));

/* svgOpt Not a pure module */
